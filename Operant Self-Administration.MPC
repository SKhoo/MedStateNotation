\-------------------------------------------------------------------------
\ A0 Operant Self-Administration
\ Version: 1.33
\ Created by Shaun Khoo (28 June 2014)
\ >('.')<
\ http://orcid.org/0000-0002-0972-3788
\-------------------------------------------------------------------------

\CONSTANTS
\INPUTS
^LeftNose = 1
^RightNose = 2
^Magazine = 3

\OUTPUTS
^LeftStimLight = 1
^RightStimLight = 2
^HouseLight = 7
^Pump = 8

\Z-PULSES
^Ignition = 1
^Timeout = 2
^PumpIsOff = 3
^EndTimeout = 4
^Shutdown = 5

\K-PULSES - To be issued by the user to establish certain default parameters or session types
^Acquisition = 1
^MagSession = 2
^AcquireDark = 3
^MagDark = 4
^AcquireLight = 5
^MagLight = 6
^AllDark = 7
^ProgressiveRatio = 8
^ProgressiveDark = 9
^ProgressiveLight = 10

\CONTROL CONSTANTS
^LongSession = 60	\Acquisition session length in minutes
^ShortSession = 20	\Magazine session length in minutes
^DefaultFR = 1		\Default Fixed Ratio
^DefaultTimeout = 24	\Default timeout period in seconds
^DefaultPump = 6	\Default pump operation time in seconds
^DefaultLongBin = 6	\Default number of timebins (acquisition)
^DefaultShortBin = 4	\Default number of timebins (magazine)
^DefaultHighMax = 5000	\Default maximum number of deliveries (acquisition)
^DefaultLowMax = 10	\Default maximum number of deliveries (magazine)
^Version = 133		\Program version x100

\VARIABLES
\VARIABLES - DATA - Session Totals
DIM A = 12
\Left Nosepokes = A(0)
\Right Nosepokes = A(1)
\Magazine Entries = A(2)
\Total Deliveries = A(3)
\Breakpoint = A(4)
\Left Nosepokes During Pump Operation = A(5)
\Left Nosepokes During Timeout = A(6)
\Right Nosepokes During Pump Operation = A(7)
\Right Nosepokes During Timeout = A(8)
\Latency to First Left Nosepoke = A(9)
\Latency to First Right Nosepoke = A(10)
\Latency to First Magazine Entry = A(11)
\Latency to First Delivery = A(12)

\VARIABLES - DATA - Chronicling
DIM B = 5000	\All event identities, 			subscript U
DIM C = 5000	\All event times,			subscript U

\VARIABLES - DATA - Timecourse Arrays
DIM D = 5000	\Left Nosepokes, 			subscript N
DIM E = 5000	\Right Nosepokes, 			subscript O
DIM F = 5000	\Magazine Entries, 			subscript P
DIM G = 5000	\Deliveries, 				subscript Q
DIM H = 5000	\Left Nosepokes During Timeout, 	subscript R
DIM I = 5000	\Right Nosepokes During Timeout, 	subscript S

\VARIABLES - DATA - Timebin Arrays
DIM J = 100	\Left Nosepokes, 			subscript T
DIM K = 100	\Right Nosepokes, 			subscript T
DIM L = 100	\Magazine Entries 			subscript T
DIM M = 100	\Deliveries, 				subscript T

\VARIABLES - CONTROL - WORKING VARIABLES
DIM X = 20
\X(0) = Session Clock (seconds)
\X(1) = Decisecond Clock
\X(2) = Timebin Clock
\X(3) = Re-zeroing response counter
\X(4) = Pump Operation Time
\X(5) = Post-pump Timeout
\X(6) = Next Delivery
\X(7) = Current Ratio

\VARIABLES - CONTROL - SESSION PARAMETERS
DIM Z = 12
var_alias Session Length (min) = Z(0)
var_alias Fixed Ratio = Z(1)
var_alias Timeout (s) = Z(2)
var_alias Maximum Deliveries = Z(3)
var_alias Pump Operation Time (s) = Z(4)
var_alias No of Timebins = Z(5)
var_alias Context Identity = Z(6)
\Macro Mode = Z(7)
\Session Type = Z(8)
\Program Version = Z(9)

\VARIABLES - CONTROL - MAGAZINE DELIVERY TIMES
LIST V = 108, 126, 92, 139, 86, 144, 79, 134, 69, 163

\VARIABLES - CONTROL - PROGRESSIVE RATIO LIST,		subscript Y
\Function: Round[5e^(reinforcer number * 0.2) - 5]
\Reference: Richardson, N. R., & Roberts, D. C. S. (1996). Progressive ratio schedules in drug self-administration 
\studies in rats: a method to evaluate reinforcing efficacy. Journal of Neuroscience Methods, 66(1), 1-11. 
\doi: 10.1016/0165-0270(95)00153-0
LIST W = 1, 2, 4, 6, 9, 12, 15, 20, 25, 32, 40, 50, 62, 77, 95, 118, 
145, 178, 219, 268, 328, 402, 492, 603, 737, 901, 1102, 1347, 1646, 
2012, 2459, 3004, 3670, 4484, 5478, 6692, 8175, 9986, 12198, 14900, 
18200, 22230, 27153, 33166, 40510, 49481, 60437, 73819, 90164, 110127

DISKVARS = A, B, C, D, E, F, G, H, I, J, K, L, M, V, W, Z
DISKOPTIONS = FULLHEADERS
DISKFORMAT = 16.3
DISKCOLUMNS = 1
Y2KCOMPLIANT

\-------------------------------------------------------------------------
\State Set 1 - Control Program

S.S.1,
S1,	\State 1 shows the program has loaded.
	0.01": SHOW 1, Initialising, Z(7); SET Z(9) = ^Version / 100;
	
	\Initiliase data array
	ZEROARRAY, A;

	\Initialise all subscripts
	SET N = 0, O = 0, P = 0, Q = 0, R = 0, S = 0, T = 0, U = 0, Y = 0;

	\Seal all arrays
	SET B(U+1) = -987.987, C(U+1) = -987.987;			\Chronicling arrays
	SET D(N+1) = -987.987, E(O+1) = -987.987, F(P+1) = -987.987;	\Timestamp recorders
	SET G(Q+1) = -987.987, H(R+1) = -987.987, I(S+1) = -987.987;
	SET J(T+1) = -987.987, K(T+1) = -987.987;			\Timebin recorders
	SET L(T+1) = -987.987, M(T+1) = -987.987;

	\Show instructions for manual mode setting
	SHOW 6, K Pulse Menu, A(0);
	SET X(10) = ^Acquisition, X(11) = ^MagSession, X(12) = ^AcquireDark;
	SET X(13) = ^MagDark, X(14) = ^AcquireLight, X(15) = ^MagLight;
	SET X(16) = ^AllDark, X(17) = ^ProgressiveRatio, X(18) = ^ProgressiveDark;
	SET X(19) = ^ProgressiveLight;
	SHOW 7, Acquisition, X(10); SHOW 8, Magazine Training, X(11);
	SHOW 9, Dark Acquisition, X(12); SHOW 10, Dark Mag Training, X(13);
	SHOW 11, Light Acquisition, X(14); SHOW 12, Light Mag Training, X(15);
	SHOW 13, Dark Hour Observation, X(16); SHOW 14, Progressive Ratio, X(17);
	SHOW 15, Dark Progressive Ratio, X(18); SHOW 16, Light Progressive Ratio, X(19);
	
	\Randomly select a time for a magazine session
	RANDD X(6) = V;
	SET Z(10) = DATETODAY + (BOX * BOX); IF Z(10) < 100000 [@ENLARGE, @OK]
		@ENLARGE: SET Z(10) = Z(10) * 100000000000 ---> S2
		@OK: SET Z(10) = Z(10) * 10000000000 ---> S2

S2,	\State 2 checks for macro initialisation
	0.5": ON ^RightStimLight; IF Z(7) > 14 [@ALLMACRO, @NOTMACRO]
		@ALLMACRO: SHOW 1, Macro Active, Z(7) ---> S8
		@NOTMACRO: IF Z(7) = 0 [@NULL, @MACROSTATE]
			@NULL: SHOW 1, No Macro, Z(7);
				SHOW 2, See displays 6-16, Z(7);
				SHOW 3, for K-pulse values, Z(7);
				SHOW 4, to set alternative, Z(7);
				SHOW 5, sessions, Z(7); SET Z(8) = 0;
				SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
				SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
				SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
				IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
					@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S3
					@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S3
			@MACROSTATE: SHOW 1, Setting Parameters, Z(7);
				IF Z(7) = 1 [@ACQUISITION, @NOTACQUISITION]
				@ACQUISITION: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
					SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
					SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
					SET Z(8) = 0; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
						@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S3
						@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S3
				@NOTACQUISITION: IF Z(7) = 2 [@MAGAZINE, @NOTMAGAZINE]
					@MAGAZINE: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
						SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
						SET Z(8) = 2; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
							@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S4
							@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S4
					@NOTMAGAZINE: IF Z(7) = 3 [@ACQUIREDARK, @NOTACQUIREDARK]
						@ACQUIREDARK: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
							SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
							SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
							SET Z(6) = 2, Z(8) = 0; LOCKOFF ^HouseLight ---> S3
						@NOTACQUIREDARK: IF Z(7) = 4 [@MAGDARK, @NOTMAGDARK]
							@MAGDARK: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
								SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
								SET Z(6) = 2, Z(8) = 2; LOCKOFF ^HouseLight ---> S4
							@NOTMAGDARK: IF Z(7) = 5 [@ACQUIRELIGHT, @NOTACQUIRELIGHT]
								@ACQUIRELIGHT: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
									SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
									SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
									SET Z(6) = 1, Z(8) = 0; LOCKON ^HouseLight ---> S3
								@NOTACQUIRELIGHT: IF Z(7) = 6 [@MAGLIGHT, @NOTMAGLIGHT]
									@MAGLIGHT: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
										SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
										SET Z(6) = 1, Z(8) = 2; LOCKON ^HouseLight ---> S4
									@NOTMAGLIGHT: IF Z(7) = 7 [@ALLDARK, @NOTALLDARK]
										@ALLDARK: SET Z(0) = ^LongSession, Z(1) = 0, Z(2) = 0, Z(3) = 0;
											SET Z(4) = 0, Z(5) = ^DefaultLongBin, Z(6) = 2;
											SET Z(8) = 3; LOCKOFF ^HouseLight ---> S6
										@NOTALLDARK: IF Z(7) = 8 [@PROGRESSIVE, @NOTPROGRESSIVE]
											@PROGRESSIVE: SET Z(0) = ^LongSession, Z(1) = 999;
												SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
												SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
												SET Z(8) = 1; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
												@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S5
												@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S5
											@NOTPROGRESSIVE: IF Z(7) = 9 [@PRDARK, @NOTPRDARK]
												@PRDARK: SET Z(0) = ^LongSession, Z(1) = 999;
													SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
													SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
													SET Z(8) = 1, Z(6) = 2; LOCKOFF ^HouseLight ---> S5
												@NOTPRDARK: IF Z(7) = 10 [@PRLIGHT, @ERROR]
													@PRLIGHT: SET Z(0) = ^LongSession, Z(1) = 999;
														SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
														SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
														SET Z(8) = 1, Z(6) = 1; LOCKON ^HouseLight ---> S5
													@ERROR: SHOW 1, Macro Error, Z(7) ---> S1

S3,	\State 3 shows key parameters of an acquisition session
	2": SHOW 1, Session Length (min), Z(0);
	SHOW 2, Fixed Ratio, Z(1);
	SHOW 3, Timeout, Z(2);
	SHOW 4, Pump Operation Time, Z(4);
	SHOW 5, No. of Timebins, Z(5);
	IF S.S.2 = 2 [@MISSEDSTART, @STAY]
		@MISSEDSTART: ---> S7
		@STAY: ---> SX

	#START ! #Z^Ignition: ---> S7

	#K^Acquisition: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 0; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
			@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> SX
			@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> SX

	#K^MagSession: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
		SET Z(8) = 2; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
			@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S4
			@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S4

	#K^AcquireDark: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(6) = 2, Z(8) = 0; LOCKOFF ^HouseLight ---> SX

	#K^MagDark: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
		SET Z(6) = 2, Z(8) = 2; LOCKOFF ^HouseLight ---> S4

	#K^AcquireLight: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(6) = 1, Z(8) = 0; LOCKON ^HouseLight ---> SX 

	#K^MagLight: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
		SET Z(6) = 1, Z(8) = 2; LOCKON ^HouseLight ---> S4

	#K^AllDark: SET Z(0) = ^LongSession, Z(1) = 0, Z(2) = 0, Z(3) = 0;
		SET Z(4) = 0, Z(5) = ^DefaultLongBin, Z(6) = 2;
		SET Z(8) = 3; LOCKOFF ^HouseLight ---> S6

	#K^ProgressiveRatio: SET Z(0) = ^LongSession, Z(1) = 999;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 1; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
			@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S5
			@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S5

	#K^ProgressiveDark: SET Z(0) = ^LongSession, Z(1) = 999;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 1, Z(6) = 2; LOCKOFF ^HouseLight ---> S5

	#K^ProgressiveLight: SET Z(0) = ^LongSession, Z(1) = 999;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 1, Z(6) = 1; LOCKON ^HouseLight ---> S5

S4,	\State 4 shows key parameters of a magazine session
	2": SHOW 1, Session Length (min), Z(0);
	SHOW 2, Pump Operation Time, Z(4);
	SHOW 3, No. of Timebins, Z(5);
	SHOW 4, Next Delivery, X(6);
	SHOW 5, Maximum Deliveries, Z(3);
	IF S.S.2 = 2 [@MISSEDSTART, @STAY]
		@MISSEDSTART: ---> S7
		@STAY: ---> SX

	#START ! #Z^Ignition: ---> S7
	
	#K^Acquisition: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 0; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
			@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S3
			@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S3

	#K^MagSession: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
		SET Z(8) = 2; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
			@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> SX
			@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> SX

	#K^AcquireDark: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(6) = 2, Z(8) = 0; LOCKOFF ^HouseLight ---> S3

	#K^MagDark: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
		SET Z(6) = 2, Z(8) = 2; LOCKOFF ^HouseLight ---> SX

	#K^AcquireLight: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(6) = 1, Z(8) = 0; LOCKON ^HouseLight ---> S3 

	#K^MagLight: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
		SET Z(6) = 1, Z(8) = 2; LOCKON ^HouseLight ---> SX

	#K^AllDark: SET Z(0) = ^LongSession, Z(1) = 0, Z(2) = 0, Z(3) = 0;
		SET Z(4) = 0, Z(5) = ^DefaultLongBin, Z(6) = 2;
		SET Z(8) = 3; LOCKOFF ^HouseLight ---> S6

	#K^ProgressiveRatio: SET Z(0) = ^LongSession, Z(1) = 999;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 1; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
			@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S5
			@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S5

	#K^ProgressiveDark: SET Z(0) = ^LongSession, Z(1) = 999;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 1, Z(6) = 2; LOCKOFF ^HouseLight ---> S5

	#K^ProgressiveLight: SET Z(0) = ^LongSession, Z(1) = 999;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 1, Z(6) = 1; LOCKON ^HouseLight ---> S5

S5,	\State 5 shows key parameters of a progressive ratio session
	2": SHOW 1, Session Length (min), Z(0);
	SHOW 2, First Ratio, W(0);
	SHOW 3, Timeout, Z(2);
	SHOW 4, Pump Operation Time, Z(4);
	SHOW 5, No. of Timebins, Z(5);
	IF S.S.2 = 2 [@MISSEDSTART, @STAY]
		@MISSEDSTART: ---> S7
		@STAY: ---> SX

	#START ! #Z^Ignition: ---> S7

	#K^Acquisition: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 0; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
			@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S3
			@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S3

	#K^MagSession: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
		SET Z(8) = 2; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
			@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S4
			@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S4

	#K^AcquireDark: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(6) = 2, Z(8) = 0; LOCKOFF ^HouseLight ---> S3

	#K^MagDark: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
		SET Z(6) = 2, Z(8) = 2; LOCKOFF ^HouseLight ---> S4

	#K^AcquireLight: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(6) = 1, Z(8) = 0; LOCKON ^HouseLight ---> S3

	#K^MagLight: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
		SET Z(6) = 1, Z(8) = 2; LOCKON ^HouseLight ---> S4

	#K^AllDark: SET Z(0) = ^LongSession, Z(1) = 0, Z(2) = 0, Z(3) = 0;
		SET Z(4) = 0, Z(5) = ^DefaultLongBin, Z(6) = 2;
		SET Z(8) = 3; LOCKOFF ^HouseLight ---> S6

	#K^ProgressiveRatio: SET Z(0) = ^LongSession, Z(1) = 999;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 1; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
			@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> SX
			@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> SX

	#K^ProgressiveDark: SET Z(0) = ^LongSession, Z(1) = 999;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 1, Z(6) = 2; LOCKOFF ^HouseLight ---> SX

	#K^ProgressiveLight: SET Z(0) = ^LongSession, Z(1) = 999;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 1, Z(6) = 1; LOCKON ^HouseLight ---> SX

S6,	\State 6 shows key parameters of an observation session
	2": SHOW 1, Session Length (min), Z(0);
	SHOW 2, No. of Timebins, Z(5); CLEAR 3, 5;
	IF S.S.2 = 2 [@MISSEDSTART, @STAY]
		@MISSEDSTART: ---> S7
		@STAY: ---> SX

	#START ! #Z^Ignition: ---> S7

	#K^Acquisition: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 0; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
			@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S3
			@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S3

	#K^MagSession: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
		SET Z(8) = 2; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
			@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S4
			@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S4

	#K^AcquireDark: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(6) = 2, Z(8) = 0; LOCKOFF ^HouseLight ---> S3

	#K^MagDark: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
		SET Z(6) = 2, Z(8) = 2; LOCKOFF ^HouseLight ---> S4

	#K^AcquireLight: SET Z(0) = ^LongSession, Z(1) = ^DefaultFR;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(6) = 1, Z(8) = 0; LOCKON ^HouseLight ---> S3

	#K^MagLight: SET Z(0) = ^ShortSession, Z(3) = ^DefaultLowMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultShortBin;
		SET Z(6) = 1, Z(8) = 2; LOCKON ^HouseLight ---> S4

	#K^AllDark: SET Z(0) = ^LongSession, Z(1) = 0, Z(2) = 0, Z(3) = 0;
		SET Z(4) = 0, Z(5) = ^DefaultLongBin, Z(6) = 2;
		SET Z(8) = 3; LOCKOFF ^HouseLight ---> SX

	#K^ProgressiveRatio: SET Z(0) = ^LongSession, Z(1) = 999;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 1; IF BOX <= 4 [@LIGHTSON, @LIGHTSOFF]
			@LIGHTSON: SET Z(6) = 1; LOCKON ^HouseLight ---> S5
			@LIGHTSOFF: SET Z(6) = 2; LOCKOFF ^HouseLight ---> S5

	#K^ProgressiveDark: SET Z(0) = ^LongSession, Z(1) = 999;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 1, Z(6) = 2; LOCKOFF ^HouseLight ---> S5

	#K^ProgressiveLight: SET Z(0) = ^LongSession, Z(1) = 999;
		SET Z(2) = ^DefaultTimeout, Z(3) = ^DefaultHighMax;
		SET Z(4) = ^DefaultPump, Z(5) = ^DefaultLongBin;
		SET Z(8) = 1, Z(6) = 1; LOCKON ^HouseLight ---> S5

S7,	
	1": WITHPI = 5000 [ADD Z(11)] ---> SX

	#Z^Shutdown: ---> S9

S8,
	#START ! #Z^Ignition: ---> S7

S9,
	#START: ---> SX
	
\-------------------------------------------------------------------------
\State Set 2 - Main Session Clock
S.S.2,
S1,	\State 1 waits for the start command, corrects session start time.
	#START ! #Z^Ignition: SET STARTHOURS = CURRENTHOURS;
	SET STARTMINUTES = CURRENTMINUTES, STARTSECONDS = CURRENTSECONDS;
	SHOW 1, Session Time, X(0);
	SUMARRAY X(9) = A, 0, 8; IF X(9) > 0 [@STOP, @GO]
		@STOP: ---> STOPKILL
		@GO: SET D(0) = Z(0) * 60, E(0) = Z(0) * 60;
		SET F(0) = Z(0) * 60, G(0) = Z(0) * 60 ---> S2

S2,	\State 2 is the session timer
	1": ADD X(0); SHOW 1, Session Time, X(0);
	IF X(0)/60 >= Z(0) [@True, @False]
		@True: Z^Shutdown ---> S4
		@False: ---> SX

S4,	\State 4 calculates latencies and breakpoint if applicable
	0.02": SET A(9) = D(0), A(10) = E(0);
 	SET A(11) = F(0), A(12) = G(0);
	SUB N, O, P, Q, R, S, U; 
	IF (Z(8) = 1) AND (A(3) > 0) [@PROGRESSIVE, @OTHER]
		@PROGRESSIVE: SET A(4) = W(Y-2) ---> S5
		@OTHER: ---> S5

S5,	
	0.2": ZEROARRAY X; SUMARRAY X(0) = A, 0, 12; SUMSQUAREARRAY X(1) = A, 0, 12 ---> S6

S6,	
	0.3": IF U > 1 [@CALCULATE, @NUMBER]
		@CALCULATE: SUMARRAY X(2) = B, 0, U; SAMPLEVARIANCE X(3) = C, 0, U ---> S7
		@NUMBER: SET X(2) = 4 * BOX, X(3) = 6 + STARTSECONDS ---> S7

S7,
	0.2": IF N > 1 [@CALCULATE, @NUMBER]
		@CALCULATE: SAMPLEVARIANCE X(4) = D, 0, N; GEOMETRICMEAN X(5) = D, 0, N ---> S8
		@NUMBER: SET X(4) = 89 + BOX, X(5) = 6 + DATETODAY - BOX * BOX ---> S8

S8,
	0.3": IF O > 1 [@CALCULATE, @NUMBER]
		@CALCULATE: POPULATIONVARIANCE X(6) = E, 0, O; HARMONICMEAN X(7) = E, 0, O ---> S9
		@NUMBER: SET X(6) = 32 + STARTHOURS, X(7) = 9 * (STARTMINUTES + 1) ---> S9

S9,
	0.2": IF P > 0 [@CALCULATE, @NUMBER]
		@CALCULATE: SAMPLEVARIANCE X(8) = F, 0, P; HARMONICMEAN X(9) = F, 0, P ---> S10
		@NUMBER: SET X(8) = 29 - BOX, X(9) = 49 * ((STARTMINUTES + 1) / (STARTSECONDS + 1)) ---> S10

S10,
	0.3": IF Q > 0 [@CALCULATE, @NUMBER]
		@CALCULATE: POPULATIONVARIANCE X(10) = G, 0, Q; GEOMETRICMEAN X(11) = G, 0, Q ---> S11
		@NUMBER: SET X(10) = 72 + ((STARTHOURS + 1) / (STARTSECONDS + 1)), X(11) = 5751 - ((STARTSECONDS + 1) / (STARTMINUTES + 1)) ---> S11

S11,
	0.4": IF R > 0 [@CALCR, @NUMR]
		@CALCR: SUMARRAY X(12) = H, 0, R; IF S > 0 [@CALCS, @NUMS]
			@CALCS: SUMARRAY X(13) = I, 0, S ---> S12
			@NUMS: SET X(13) = 8 ---> S12
		@NUMR: SET X(12) = 31; IF S > 0 [@CALCS, @NUMS]
			@CALCS: SUMARRAY X(13) = I, 0, S ---> S12
			@NUMS: SET X(13) = 84 ---> S12

S12,
	0.3": GEOMETRICMEAN X(14) = X, 0, 13; SUMSQUAREARRAY X(15) = X, 0, 14 ---> S13

S13,
	0.2": GEOMETRICMEAN X(16) = X, 0, 15; IF Z(8) = 1 [@USEMAG, @USEPR]
		@USEMAG: INITCONSTPROBARR V, X(16); SUMSQUAREARRAY X(17) = V, 0, 9;
			GEOMETRICMEAN X(18) = V, 0, 9; HARMONICMEAN X(19) = V, 0, 9 ---> S14
		@USEPR: INITCONSTPROBARR W, X(16); SUMSQUAREARRAY X(17) = W, 0, 49;
			GEOMETRICMEAN X(18) = W, 0, 49; HARMONICMEAN X(19) = W, 0, 49 ---> S14

S14,	
	0.1": SET X(20) = X(15)  + X(16) + (X(17) * 10) + X(18) + X(19) ---> S15

S15,
	0.01": IF X(20) < 10000000000 [@MAYBE, @TRUNCATE]
		@MAYBE: IF X(20) < 1000000000 [@EXPAND, @SAVE]
			@EXPAND: SET X(20) = X(20) * 10 --->SX
			@SAVE: SET Z(10) = Z(10) + X(20) ---> STOPABORTFLUSH
		@TRUNCATE: SET X(20) = X(20) / 10 ---> SX

\-------------------------------------------------------------------------
\State Set 3 - Centisecond Timer, not for display or printing

S.S.3,
S1,	\State 1 starts the clock
	#START ! #Z^Ignition: IF (Z(8) = 2) AND ((Z(0) = 20) AND (Z(5) = 4)) [@MAG, @REGULAR]
		@MAG: SET J(T+1) = 0, K(T+1) = 0, L(T+1) = 0, M(T+1) = 0;
			SET J(4) = -987.987, K(4) = -987.987, L(4) = -987.987, M(4) = -987.987 ---> S3
		@REGULAR: ---> S2

S2,	\State 2 counts upwards in 10 ms increments
	\Incorporates the timebin shifter
	0.01": SET X(1) = X(1) + 0.01;
	SET X(2) = X(2) + 0.01; 
	IF (X(2) / 60 >= (Z(0) / Z(5))) AND ((T + 1) < Z(5)) [@TRUE, @FALSE]
		@TRUE: SET X(2) = 0; ADD T;
		SET J(T) = 0, K(T) = 0, L(T) = 0, M(T) = 0;
		SET J(T+1) = -987.987;
		SET K(T+1) = -987.987;
		SET L(T+1) = -987.987;
		SET M(T+1) = -987.987 ---> SX
		@FALSE: ---> SX

	#Z^Shutdown: ---> S1

S3,	\State 3 counts upwards in 10ms increments but does not seal the timebin arrays	
	0.01": SET X(1) = X(1) + 0.01;
	SET X(2) = X(2) + 0.01; 
	IF (X(2) / 60 >= (Z(0) / Z(5))) AND ((T + 1) < Z(5)) [@TRUE, @FALSE]
		@TRUE: SET X(2) = 0; ADD T;
		SET J(T) = 0, K(T) = 0, L(T) = 0, M(T) = 0 ---> SX
		@FALSE: ---> SX

	#Z^Shutdown: ---> S1

\-------------------------------------------------------------------------
\State Set 4 - Left Nosepokes are Active

S.S.4,
S1,	\State 1 responds to the Start or ignition command
	#START ! #Z^Ignition: SET X(4) = Z(4) * 1"; IF (Z(8) >= 2) OR (((Z(1) <= 0) OR (Z(3) <= 0)) OR (Z(4) <= 0)) [@MAGAZINE, @REINFORCED]
		@MAGAZINE: IF ((Z(0) = 20) AND (Z(5) = 4)) AND (Z(8) = 2) [@NODISPLAY, @DISPLAY]
			@NODISPLAY: ---> S13
			@DISPLAY: IF (Z(3) <= 0) OR (Z(4) <= 0) [@NOREWARDS, @REWARDS]
				@NOREWARDS: SHOW 2, Left Nosepokes, A(0); SHOW 4, Rewards Unavailable, A(3) ---> S12
				@REWARDS: SHOW 2, Left Nosepokes, A(0); SHOW 4, Rewards, A(3) ---> S12
		@REINFORCED: ON ^LeftStimLight; IF Z(8) = 1 [@PROGRESSIVE, @ACQUISITION]
			@PROGRESSIVE: LIST X(7) = W(Y); IF Z(2) <= Z(4) [@NOTIMEOUT, @TIMEOUT]
				@NOTIMEOUT: SET Z(2) = 0;
					SHOW 2, Left Nosepokes, A(0);
					SHOW 4, Rewards, A(3) ---> S10
				@TIMEOUT: SET X(5) = (Z(2) - Z(4)) * 1"; 
					SHOW 2, Left Nosepokes, A(0);
					SHOW 4, Rewards, A(3) ---> S7
			@ACQUISITION: IF Z(2) <= Z(4) [@NOTIMEOUT, @TIMEOUT]
				@NOTIMEOUT: SET Z(2) = 0;
					SHOW 2, Left Nosepokes, A(0);
					SHOW 4, Rewards, A(3) ---> S5
				@TIMEOUT: SET X(5) = (Z(2) - Z(4)) * 1";
					SHOW 2, Left Nosepokes, A(0);
					SHOW 4, Rewards, A(3) ---> S2

	\States 2-5 form loop 1 for the ACQUISITION session with a timeout

S2,	\State 2 records response time, adds to total, timebin, rewards
	#R^LeftNose: ADD A(0), J(T); SET D(N) = X(1); ADD N; SET D(N) = -987.987;
	SHOW 2, Left Nosepokes, A(0);

	ADD X(3); IF (X(3) >= Z(1)) AND (A(3) < Z(3)) [@REWARD, @NULL]
		@REWARD: ADD A(3), M(T); SET G(Q) = X(1); ADD Q;
			SET G(Q) = -987.987, B(U) = 1.8, C(U) = X(1);
			ADD U; SET B(U) = -987.987, C(U) = -987.987;
			SHOW 4, Rewards, A(3); SET X(3) = 0;
			ON ^Pump; OFF ^LeftStimLight; Z^Timeout ---> S3
		@NULL: SET B(U) = 1, C(U) = X(1); ADD U;
			SET B(U) = -987.987, C(U) = -987.987 ---> SX

	#Z^Shutdown: ---> S1

S3,	\State 3 records responses while the pump is on
	\The pump operates during the timeout period
	#R^LeftNose: ADD A(0), A(5), A(6), J(T); 
	SET D(N) = X(1), H(R) = X(1); ADD N, R;
	SET D(N) = -987.987, H(R) = -987.987;
	SET B(U) = 1.1, C(U) = X(1); ADD U; SET B(U) = -987.987, C(U) = -987.987;
	SHOW 2, Left Nosepokes, A(0) ---> SX

	#Z^Shutdown: OFF ^Pump ---> S1
	X(4)#T: OFF ^Pump; Z^PumpIsOff ---> S4

S4,	\State 4 records responses during timeout, while pump is not on
	#R^LeftNose: ADD A(0), A(6), J(T); 
	SET D(N) = X(1), H(R) = X(1); ADD N, R;
	SET D(N) = -987.987, H(R) = -987.987;
	SET B(U) = 1.2, C(U) = X(1); ADD U; SET B(U) = -987.987, C(U) = -987.987;
	SHOW 2, Left Nosepokes, A(0) ---> SX

	#Z^Shutdown: ---> S1
	X(5)#T: ON ^LeftStimLight; Z^EndTimeout ---> S2

	\States 5-6 form loop 2 for the ACQUISITION session without a timeout

S5,	\State 5 records response time, adds to total, timebin, rewards
	#R^LeftNose: ADD A(0), J(T); SET D(N) = X(1); ADD N; SET D(N) = -987.987;
	SHOW 2, Left Nosepokes, A(0);

	ADD X(3); IF (X(3) >= Z(1)) AND (A(3) < Z(3)) [@REWARD, @NULL]
		@REWARD: ADD A(3), M(T); SET G(Q) = X(1); ADD Q;
			SET G(Q) = -987.987, B(U) = 1.8, C(U) = X(1);
			ADD U; SET B(U) = -987.987, C(U) = -987.987;
			SHOW 4, Rewards, A(3); SET X(3) = 0;
			ON ^Pump; OFF ^LeftStimLight; Z^Timeout ---> S6
		@NULL: SET B(U) = 1, C(U) = X(1); ADD U;
			SET B(U) = -987.987, C(U) = -987.987 ---> SX

	#Z^Shutdown: ---> S1

S6,	\State 6 records responses while the pump is on
	#R^LeftNose: ADD A(0), A(5), A(6), J(T); 
	SET D(N) = X(1), H(R) = X(1); ADD N, R;
	SET D(N) = -987.987, H(R) = -987.987;
	SET B(U) = 1.1, C(U) = X(1); ADD U; SET B(U) = -987.987, C(U) = -987.987;
	SHOW 2, Left Nosepokes, A(0) ---> SX

	#Z^Shutdown: OFF ^Pump ---> S1
	X(4)#T: OFF ^Pump; ON ^LeftStimLight; Z^EndTimeout ---> S5

	\States 7-9 form loop 3 for the PROGRESSIVE RATIO session with a timeout

S7,	\State 7 records response time, adds to total, timebin, rewards
	#R^LeftNose: ADD A(0), J(T); SET D(N) = X(1); ADD N; SET D(N) = -987.987;
	SHOW 2, Left Nosepokes, A(0);

	ADD X(3); IF (X(3) >= X(7)) AND (A(3) < Z(3)) [@REWARD, @NULL]
		@REWARD: ADD A(3), M(T); SET G(Q) = X(1); ADD Q;
			SET G(Q) = -987.987, B(U) = 1.8, C(U) = X(1);
			ADD U; SET B(U) = -987.987, C(U) = -987.987;
			SHOW 4, Rewards, A(3); SET X(3) = 0; LIST X(7) = W(Y);
			ON ^Pump; OFF ^LeftStimLight; Z^Timeout ---> S8
		@NULL: SET B(U) = 1, C(U) = X(1); ADD U;
			SET B(U) = -987.987, C(U) = -987.987 ---> SX

	#Z^Shutdown: ---> S1

S8,	\State 8 records responses while the pump is on
	\The pump operates during the timeout period
	#R^LeftNose: ADD A(0), A(5), A(6), J(T); 
	SET D(N) = X(1), H(R) = X(1); ADD N, R;
	SET D(N) = -987.987, H(R) = -987.987;
	SET B(U) = 1.1, C(U) = X(1); ADD U; SET B(U) = -987.987, C(U) = -987.987;
	SHOW 2, Left Nosepokes, A(0) ---> SX

	#Z^Shutdown: OFF ^Pump ---> S1
	X(4)#T: OFF ^Pump; Z^PumpIsOff ---> S9

S9,	\State 9 records responses during timeout, while pump is not on
	#R^LeftNose: ADD A(0), A(6), J(T); 
	SET D(N) = X(1), H(R) = X(1); ADD N, R;
	SET D(N) = -987.987, H(R) = -987.987;
	SET B(U) = 1.2, C(U) = X(1); ADD U; SET B(U) = -987.987, C(U) = -987.987;
	SHOW 2, Left Nosepokes, A(0) ---> SX

	#Z^Shutdown: ---> S1
	X(5)#T: ON ^LeftStimLight; Z^EndTimeout ---> S7

	\States 10-11 form loop 4 for the PROGRESSIVE RATIO session without a timeout

S10,	\State 10 records response time, adds to total, timebin, rewards
	#R^LeftNose: ADD A(0), J(T); SET D(N) = X(1); ADD N; SET D(N) = -987.987;
	SHOW 2, Left Nosepokes, A(0);

	ADD X(3); IF (X(3) >= X(7)) AND (A(3) < Z(3)) [@REWARD, @NULL]
		@REWARD: ADD A(3), M(T); SET G(Q) = X(1); ADD Q;
			SET G(Q) = -987.987, B(U) = 1.8, C(U) = X(1);
			ADD U; SET B(U) = -987.987, C(U) = -987.987;
			SHOW 4, Rewards, A(3); SET X(3) = 0; LIST X(7) = W(Y);
			ON ^Pump; OFF ^LeftStimLight; Z^Timeout ---> S11
		@NULL: SET B(U) = 1, C(U) = X(1); ADD U;
			SET B(U) = -987.987, C(U) = -987.987 ---> SX

	#Z^Shutdown: ---> S1

S11,	\State 11 records responses while the pump is on
	#R^LeftNose: ADD A(0), A(5), A(6), J(T); 
	SET D(N) = X(1), H(R) = X(1); ADD N, R;
	SET D(N) = -987.987, H(R) = -987.987;
	SET B(U) = 1.1, C(U) = X(1); ADD U; SET B(U) = -987.987, C(U) = -987.987;
	SHOW 2, Left Nosepokes, A(0) ---> SX

	#Z^Shutdown: OFF ^Pump ---> S1
	X(4)#T: OFF ^Pump; ON ^LeftStimLight; Z^EndTimeout ---> S10

S12,	\State 12 records and displays left nosepokes during a MAGAZINE or OBSERVATION session
	#R^LeftNose: ADD A(0), J(T); SET D(N) = X(1); ADD N; SET D(N) = -987.987;
	SHOW 2, Left Nosepokes, A(0); SET B(U) = 1, C(U) = X(1); ADD U; 
	SET B(U) = -987.987, C(U) = -987.987 ---> SX

	#Z^Shutdown: ---> S1

S13,	\State 13 records but does not display left nosepokes
	#R^LeftNose: ADD A(0), J(T); SET D(N) = X(1); ADD N; SET D(N) = -987.987;
	SET B(U) = 1, C(U) = X(1); ADD U; SET B(U) = -987.987, C(U) = -987.987 ---> SX

	#Z^Shutdown: ---> S1

\-------------------------------------------------------------------------
\State Set 5 - Right Nosepokes are Inactive

S.S.5,
S1,	\State 1 responds to the Start or ignition command
	#START: IF (Z(8) = 2) AND ((Z(0) = 20) AND (Z(5) = 4)) [@NODISPLAY, @DISPLAY]
		@NODISPLAY: ---> S6
		@DISPLAY: SHOW 3, Right Nosepokes, A(1) ---> S2

	#Z^Ignition: IF (Z(8) = 2) AND ((Z(0) = 20) AND (Z(5) = 4)) [@NODISPLAY, @DISPLAY]
		@NODISPLAY: ---> S5
		@DISPLAY: SHOW 3, Right Nosepokes, A(1) ---> S5

S2,	\State 2 records response time, adds to total responses
	#R^RightNose: ADD A(1), K(T); SET E(O) = X(1); ADD O; SET E(O) = -987.987;
	SET B(U) = 2, C(U) = X(1); ADD U; SET B(U) = -987.987, C(U) = -987.987;
	SHOW 3, Right Nosepokes, A(1) ---> SX

	#Z^Timeout: ---> S3
	#Z^Shutdown: ---> S1	

S3,	\State 3 records responses while the pump is on
	#R^RightNose: ADD A(1), A(7), A(8), K(T); SET E(O) = X(1), I(S) = X(1);
	ADD O, S; SET E(O) = -987.987, I(S) = -987.987; 
	SET B(U) = 2.1, C(U) = X(1); ADD U; SET B(U) = -987.987, C(U) = -987.987;
	SHOW 3, Right Nosepokes, A(1) ---> SX

	#Z^PumpIsOff: ---> S4
	#Z^EndTimeout: ---> S2
	#Z^Shutdown: ---> S1

S4,	\State 4 records responses during timeout, while pump is not on
	#R^RightNose: ADD A(1), A(8), K(T); SET E(O) = X(1), I(S) = X(1);
	ADD O, S; SET E(O) = -987.987, I(S) = -987.987; 
	SET B(U) = 2.2, C(U) = X(1); ADD U; SET B(U) = -987.987, C(U) = -987.987;
	SHOW 3, Right Nosepokes, A(1) ---> SX

	#Z^EndTimeout: ---> S2
	#Z^Shutdown: ---> S1

S5,	\State 5 holds the right nosepoke for 0.5 seconds to ensure no accidental activation
	0.5": IF (Z(8) = 2) AND ((Z(0) = 20) AND (Z(5) = 4)) [@NODISPLAY, @DISPLAY]
		@NODISPLAY: ---> S6
		@DISPLAY: SHOW 3, Right Nosepokes, A(1) ---> S2

S6,	\State 6 records right nosepokes but does not display them
	#R^RightNose: ADD A(1), K(T); SET E(O) = X(1); ADD O; SET E(O) = -987.987;
	SET B(U) = 2, C(U) = X(1); ADD U; SET B(U) = -987.987, C(U) = -987.987 ---> SX

	#Z^Shutdown: ---> S1

\-------------------------------------------------------------------------
\State Set 6 - Magazine Entries

S.S.6,
S1,	\State 1 responds to the Start command
	#START ! #Z^Ignition: IF (Z(8) = 2) AND (Z(4) > 0) [@MAG, @DISPLAY]
		@MAG: SET X(3) = X(6) * 1";
		IF (Z(0) = 20) AND (Z(5) = 4) [@DEFAULT, @CONFUSED]
			@DEFAULT: SHOW 2, Mag Entries 0-5min, A(2);
				SHOW 3, Mag Entries 5-10min, A(2);
				SHOW 4, Mag Entries 10-15min, A(2);
				SHOW 5, Mag Entries 15-20min, A(2) ---> S5
			@CONFUSED: SHOW 5, Magazine Entries, A(2) ---> S2
		@DISPLAY: SHOW 5, Magazine Entries, A(2) ---> S4

S2,	\State 2 records response time, adds to totals, timebin, waits to deliver
	#R^Magazine: ADD A(2), L(T); SET F(P) = X(1), B(U) = 3, C(U) = X(1);
	ADD P, U; SET F(P) = -987.987, B(U) = -987.987, C(U) = -987.987;
	SHOW 5, Magazine Entries, A(2) ---> SX

	X(3)#T: ADD A(3), M(T); SET G(Q) = X(1); ADD Q;
	SET G(Q) = -987.987, B(U) = 4, C(U) = X(1);
	ADD U; SET B(U) = -987.987, C(U) = -987.987; ON ^Pump ---> S3

	#Z^Shutdown: ---> S1

S3,	\State 3 switches off the pump and checks if another delivery is needed
	#R^Magazine: ADD A(2), L(T); SET F(P) = X(1), B(U) = 3, C(U) = X(1);
	ADD P, U; SET F(P) = -987.987, B(U) = -987.987, C(U) = -987.987;
	SHOW 5, Magazine Entries, A(2) ---> SX

	X(4)#T: OFF ^Pump; IF A(3) < Z(3) [@CONTINUE, @STOP]
		@CONTINUE: RANDD X(6) = V; SET X(3) = X(6) * 1" ---> S2
		@STOP: SET X(6) = -1 ---> S4

	#Z^Shutdown: ---> S1

S4,	\State 4 records magazine entries
	#R^Magazine: ADD A(2), L(T); SET F(P) = X(1), B(U) = 3, C(U) = X(1);
	ADD P, U; SET F(P) = -987.987, B(U) = -987.987, C(U) = -987.987;
	SHOW 5, Magazine Entries, A(2) ---> SX

	#Z^Shutdown: ---> S1

S5,	\State 5 records response time, adds to totals for standard magazine sessions
	#R^Magazine: ADD A(2), L(T); SET F(P) = X(1), B(U) = 3, C(U) = X(1);
	ADD P, U; SET F(P) = -987.987, B(U) = -987.987, C(U) = -987.987;
	SHOW 2, Mag Entries 0-5min, L(0);
	SHOW 3, Mag Entries 5-10min, L(1);
	SHOW 4, Mag Entries 10-15min, L(2);
	SHOW 5, Mag Entries 15-20min, L(3) ---> SX

	X(3)#T: ADD A(3), M(T); SET G(Q) = X(1); ADD Q;
	SET G(Q) = -987.987, B(U) = 4, C(U) = X(1);
	ADD U; SET B(U) = -987.987, C(U) = -987.987; ON ^Pump ---> S6

	#Z^Shutdown: ---> S1

S6,	\State 6 switches off the pump and checks if another delivery is needed
	#R^Magazine: ADD A(2), L(T); SET F(P) = X(1), B(U) = 3, C(U) = X(1);
	ADD P, U; SET F(P) = -987.987, B(U) = -987.987, C(U) = -987.987;
	SHOW 2, Mag Entries 0-5min, L(0);
	SHOW 3, Mag Entries 5-10min, L(1);
	SHOW 4, Mag Entries 10-15min, L(2);
	SHOW 5, Mag Entries 15-20min, L(3) ---> SX

	X(4)#T: OFF ^Pump; IF A(3) < Z(3) [@CONTINUE, @STOP]
		@CONTINUE: RANDD X(6) = V; SET X(3) = X(6) * 1" ---> S5
		@STOP: SET X(6) = -1 ---> S7

	#Z^Shutdown: ---> S1

S7,	\State records magazine entries
	#R^Magazine: ADD A(2), L(T); SET F(P) = X(1), B(U) = 3, C(U) = X(1);
	ADD P, U; SET F(P) = -987.987, B(U) = -987.987, C(U) = -987.987;
	SHOW 2, Mag Entries 0-5min, L(0);
	SHOW 3, Mag Entries 5-10min, L(1);
	SHOW 4, Mag Entries 10-15min, L(2);
	SHOW 5, Mag Entries 15-20min, L(3) ---> SX

	#Z^Shutdown: ---> S1

\-------------------------------------------------------------------------
\State Set 7 - Pre-program flush & right nosepoke ignition sequence

S.S.7,
S1,	\The option to run the pump will be disabled by program start
	#R^LeftNose: ON ^Pump ---> S2
	#START: OFF ^RightStimLight---> S3
	#R^RightNose: Z^Ignition; OFF ^RightStimLight ---> S3

S2,	
	20": OFF ^Pump ---> S1

	#START: OFF ^Pump, ^RightStimLight ---> S3

S3,	
	#Z^Shutdown: SHOW 12, Program Version, Z(9);
	SHOW 6, Written By, Z(9);
	SHOW 7, Shaun Khoo, Z(9);
	SHOW 8, ORCID, Z(9);
	SHOW 9, http://orcid.org/0000-0002-0972-3788, Z(9) ---> SX

\-------------------------------------------------------------------------
\State Set 8 - Match

S.S.8,
S1,	\State 1 responds to the start command
	#START ! #Z^Ignition: CLEAR 6, 13; SET X(8) = (Z(0) * 1') / 2 ---> S2

S2,	\State 2 waits until the session midpoint before checking elements
	X(8)#T: IF A(0) = N [@TOTALMATCH, @MISMATCH]
		@TOTALMATCH: SET Z(12) = N + O + P + Q + R + S + (T * T) + U;
			SET Z(12) = Z(12) * (Z(12) / 4) ---> S3
		@MISMATCH: SET Z(12) = -55 ---> SX

S3,
	0.05": IF Z(12) > 0 [@SETLENGTH, @LEAVE]
		@SETLENGTH: ---> S4
		@LEAVE: ---> S6

S4,
	0.05": IF (Z(12) < 100000000000) [@EXPAND, @CHECK]
			@EXPAND: SET Z(12) = Z(12) * 10 ---> SX
			@CHECK: IF Z(12) < 100000000000 [@SAVE, @TRUNCATE]
				@SAVE: ---> S5
				@TRUNCATE: SET Z(12) = Z(12) / 10 ---> SX

S5,
	#Z^Shutdown: SET Z(12) = Z(12) + N + O + P + Q + R + S + T + U ---> S6

S6,
	#START ! #Z^Ignition: ---> SX
\-------------------------------------------------------------------------